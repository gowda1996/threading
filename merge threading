#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<pthread.h>
#define MAX 20000

clock_t start, end;
double time_spent;
int merge[MAX];

pthread_barrier_t barrier;

void mergeSort(int arr[],int low,int mid,int high);
void partition(int arr[],int low,int high);
//void mergeSort1(int arr[],int low,int mid,int high);
//void partition1(int arr[],int low,int high);


typedef struct 
{
 int len;
 int size;
}t_data;

void *t_fun1(void *arg)
{
 int c;
 //printf("entering thread 1");
 t_data *data=(t_data*)arg;
 int  length=data->len;
 int  s=data->size;
 partition(merge,0,s-(3*length)-1);
 pthread_barrier_wait (&barrier);
 c=s%4;

 int mid=(s-1)/2;
 mergeSort(merge,0,s-3*length-1,s-2*length-1);

 pthread_exit(NULL);
}
void *t_fun2(void *arg)
{
 //printf("entering thread 2");
 t_data *data=(t_data*)arg;
 int length=data->len;
 int  s=data->size;
 partition(merge,s-3*length,s-2*length-1);
 pthread_barrier_wait (&barrier);
 mergeSort(merge,s-2*length,s-length-1,s-1);
 pthread_exit(NULL);
}
void *t_fun3(void *arg)
{
 //printf("entering thread 3");
 t_data *data=(t_data*)arg;
 int length=data->len;
 int  s=data->size;
 partition(merge,s-2*length,s-length-1);
 pthread_barrier_wait (&barrier);
 pthread_exit(NULL);
}
void *t_fun4(void *arg)
{
 //printf("entering thread 4");
 t_data *data=(t_data*)arg;
 int length=data->len;
 int  s=data->size;
 partition(merge,s-length,s-1);
 pthread_barrier_wait (&barrier);
 pthread_exit(NULL);
}


int main(){
   // begin=clock();
    pthread_t t[4];
    t_data g[4];
    int i,j,n,l1,l2,k1,k2,k3,k4,p;
    srand(time(NULL));

    printf("Enter the total number of elements: ");
    scanf("%d",&n);
    start=clock();
    l1=n/4;
    l2=n-l1;
    for (i=0;i<4;i++)
    {
    g[i].len=l1;
    g[i].size=n;
    }
    //printf("Enter the elements which to be sort: ");
    for(i=0;i<n;i++){
        // scanf("%d",&merge[i]);
        merge[i]=rand() % 1000 + 1;
    }
    printf("\nrandom numbers in random order : ");
    for(i=0;i<n;i++){
        // scanf("%d",&merge[i]);
        //merge[i]=rand() % 1000 + 1;
        printf("%d  ",merge[i]);
    }

    pthread_barrier_init (&barrier, NULL, 5);
    k1=pthread_create(&t[0],NULL,t_fun1,(void*)&g[0]);
    k2=pthread_create(&t[1],NULL,t_fun2,(void*)&g[1]);
    k3=pthread_create(&t[2],NULL,t_fun3,(void*)&g[2]);
    k4=pthread_create(&t[3],NULL,t_fun4,(void*)&g[3]);

    pthread_barrier_wait (&barrier);


   // partition(merge,0,n-1);
    for (i = 0; i < 4; ++i) {
    pthread_join(t[i], NULL);
  }
   /* for(i=0;i<n;i++){
         printf("%d ",merge[i]);
    }
    printf("\n");*/
 
  //int mid=(n-1)/2;
  mergeSort(merge,0,n-2*l1-1,n-1);
  

   // printf("%d \n",n);
   /* for(i=0,j=l1,p=0;p<n;p++)
    { if(i<l1 && j<n){
      if (merge[i]<merge[j])
        {
          f[p]=merge[i]; 
          i++;
         // printf("i : %d",i);
        }
      else if (merge[i]>=merge[j])
        {
          f[p]=merge[j];
          j++;
         // printf("j : %d",j);
        }
      }
       else if (j==n){
        f[p]=merge[i];
        i++;
       }
       else {
       f[p]=merge[j];
       j++; }
   // printf("%d \n",p);
    }*/

    printf("\nAfter sorting elements are : ");
    for(i=0;i<n;i++){
         printf("%d ",merge[i]);
    }
printf("\n");

 
end = clock();
time_spent = (double)(end - start) / CLOCKS_PER_SEC;
printf("%lf",time_spent);
return 0;
}

void partition(int arr[],int low,int high){

    int mid;

    if(low<high){
         mid=(low+high)/2;
         partition(arr,low,mid);
         partition(arr,mid+1,high);
         mergeSort(arr,low,mid,high);
    }
}

void mergeSort(int arr[],int low,int mid,int high){

    int i,m,k,l,temp[MAX];

    l=low;
    i=low;
    m=mid+1;

    while((l<=mid)&&(m<=high)){

         if(arr[l]<=arr[m]){
             temp[i]=arr[l];
             l++;
         }
         else{
             temp[i]=arr[m];
             m++;
         }
         i++;
    }

    if(l>mid){
         for(k=m;k<=high;k++){
             temp[i]=arr[k];
             i++;
         }
    }
    else{
         for(k=l;k<=mid;k++){
             temp[i]=arr[k];
             i++;
         }
    }
   
    for(k=low;k<=high;k++){
      arr[k]=temp[k];
   }
}
